// <auto-generated />
using System;
using Melodix.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodix.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716022603_v4-nick")]
    partial class v4nick
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodix.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaLanzamiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpotifyAlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlPortada")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodix.Models.Artista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifyArtistaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artistas");
                });

            modelBuilder.Entity("Melodix.Models.HistorialEscucha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EscuchadaEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PistaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HistorialesEscucha");
                });

            modelBuilder.Entity("Melodix.Models.HistorialLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccionLike")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ObjetoId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoObjetoLike")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HistorialesLike");
                });

            modelBuilder.Entity("Melodix.Models.ListaPista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AgregadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ListaId")
                        .HasColumnType("integer");

                    b.Property<int>("PistaId")
                        .HasColumnType("integer");

                    b.Property<int>("Posicion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.HasIndex("PistaId");

                    b.ToTable("ListaPistas");
                });

            modelBuilder.Entity("Melodix.Models.ListaReproduccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Colaborativa")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Publica")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sincronizada")
                        .HasColumnType("boolean");

                    b.Property<string>("SpotifyListaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ListasReproduccion");
                });

            modelBuilder.Entity("Melodix.Models.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rol")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Melodix.Models.Models.ArchivoSubido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("EntidadReferencia")
                        .HasColumnType("text");

                    b.Property<bool>("EsPublico")
                        .HasColumnType("boolean");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HashArchivo")
                        .HasColumnType("text");

                    b.Property<int?>("IdReferencia")
                        .HasColumnType("integer");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PistaId")
                        .HasColumnType("integer");

                    b.Property<string>("RutaAlmacenamiento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TamanoBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ArchivosSubidos");
                });

            modelBuilder.Entity("Melodix.Models.Models.LogSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detalle")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LogsSistema");
                });

            modelBuilder.Entity("Melodix.Models.Models.PerfilUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasColumnType("text");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("SpotifyTokenAcceso")
                        .HasColumnType("text");

                    b.Property<string>("SpotifyTokenRefresco")
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("PerfilesUsuario");
                });

            modelBuilder.Entity("Melodix.Models.Models.SolicitudMusico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminRevisorId")
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .HasColumnType("text");

                    b.Property<string>("MotivoRechazo")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminRevisorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SolicitudesMusico");
                });

            modelBuilder.Entity("Melodix.Models.Models.TransaccionPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detalle")
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JsonRespuesta")
                        .HasColumnType("text");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.Property<string>("ReferenciaExterna")
                        .HasColumnType("text");

                    b.Property<int>("Servicio")
                        .HasColumnType("integer");

                    b.Property<int?>("SuscripcionId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TransaccionesPago");
                });

            modelBuilder.Entity("Melodix.Models.Pista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<string>("Artista")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ArtistaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duracion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaLanzamiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpotifyPistaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlPortada")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Pistas");
                });

            modelBuilder.Entity("Melodix.Models.PlanSuscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DuracionMeses")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxCuentas")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PermiteControlExplicito")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric");

                    b.Property<bool>("RequiereVerificacionEstudiante")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PlanesSuscripcion");
                });

            modelBuilder.Entity("Melodix.Models.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Suscripciones");
                });

            modelBuilder.Entity("Melodix.Models.SuscripcionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SuscripcionId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SuscripcionesUsuario");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioLikeAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLikesAlbum");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioLikeLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ListaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLikesLista");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioLikePista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PistaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLikesPista");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioSigue", b =>
                {
                    b.Property<string>("SeguidorId")
                        .HasColumnType("text");

                    b.Property<string>("SeguidoId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("SeguidorId", "SeguidoId");

                    b.HasIndex("SeguidoId");

                    b.ToTable("UsuariosSigue");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioSigueArtista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosSigueArtista");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioSigueLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ListaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosSigueLista");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Melodix.Models.Album", b =>
                {
                    b.HasOne("Melodix.Models.Artista", "Artista")
                        .WithMany("Albumes")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artista");
                });

            modelBuilder.Entity("Melodix.Models.HistorialEscucha", b =>
                {
                    b.HasOne("Melodix.Models.Pista", "Pista")
                        .WithMany("HistorialEscuchas")
                        .HasForeignKey("PistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("HistorialEscuchas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.HistorialLike", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("HistorialLikes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.ListaPista", b =>
                {
                    b.HasOne("Melodix.Models.ListaReproduccion", "Lista")
                        .WithMany("ListaPistas")
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Pista", "Pista")
                        .WithMany("ListaPistas")
                        .HasForeignKey("PistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lista");

                    b.Navigation("Pista");
                });

            modelBuilder.Entity("Melodix.Models.ListaReproduccion", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("ListasReproduccion")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.Models.ArchivoSubido", b =>
                {
                    b.HasOne("Melodix.Models.Pista", null)
                        .WithMany("ArchivosMusica")
                        .HasForeignKey("PistaId");

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("ArchivosSubidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.Models.LogSistema", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("LogsGenerados")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.Models.PerfilUsuario", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithOne("Perfil")
                        .HasForeignKey("Melodix.Models.Models.PerfilUsuario", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.Models.SolicitudMusico", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", "AdminRevisor")
                        .WithMany("SolicitudesRevisadas")
                        .HasForeignKey("AdminRevisorId");

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("SolicitudesMusico")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminRevisor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.Models.TransaccionPago", b =>
                {
                    b.HasOne("Melodix.Models.Suscripcion", "Suscripcion")
                        .WithMany("TransaccionesPago")
                        .HasForeignKey("SuscripcionId");

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("TransaccionesPago")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suscripcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.Pista", b =>
                {
                    b.HasOne("Melodix.Models.Album", null)
                        .WithMany("Pistas")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melodix.Models.Artista", "ArtistaNav")
                        .WithMany("Pistas")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistaNav");
                });

            modelBuilder.Entity("Melodix.Models.Suscripcion", b =>
                {
                    b.HasOne("Melodix.Models.PlanSuscripcion", "Plan")
                        .WithMany("Suscripciones")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("Suscripciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.SuscripcionUsuario", b =>
                {
                    b.HasOne("Melodix.Models.Suscripcion", "Suscripcion")
                        .WithMany("SuscripcionUsuarios")
                        .HasForeignKey("SuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("SuscripcionUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suscripcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioLikeAlbum", b =>
                {
                    b.HasOne("Melodix.Models.Album", "Album")
                        .WithMany("UsuarioLikeAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("UsuarioLikeAlbums")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioLikeLista", b =>
                {
                    b.HasOne("Melodix.Models.ListaReproduccion", "Lista")
                        .WithMany("UsuarioLikeListas")
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("UsuarioLikeListas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioLikePista", b =>
                {
                    b.HasOne("Melodix.Models.Pista", "Pista")
                        .WithMany("UsuarioLikePistas")
                        .HasForeignKey("PistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("UsuarioLikePistas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioSigue", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Seguido")
                        .WithMany("Seguidores")
                        .HasForeignKey("SeguidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Seguidor")
                        .WithMany("Seguidos")
                        .HasForeignKey("SeguidorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seguido");

                    b.Navigation("Seguidor");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioSigueArtista", b =>
                {
                    b.HasOne("Melodix.Models.Artista", "Artista")
                        .WithMany("UsuariosQueSiguen")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("UsuarioSigueArtistas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Models.UsuarioSigueLista", b =>
                {
                    b.HasOne("Melodix.Models.ListaReproduccion", "Lista")
                        .WithMany("UsuarioSigueListas")
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", "Usuario")
                        .WithMany("UsuarioSigueListas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Melodix.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melodix.Models.Album", b =>
                {
                    b.Navigation("Pistas");

                    b.Navigation("UsuarioLikeAlbums");
                });

            modelBuilder.Entity("Melodix.Models.Artista", b =>
                {
                    b.Navigation("Albumes");

                    b.Navigation("Pistas");

                    b.Navigation("UsuariosQueSiguen");
                });

            modelBuilder.Entity("Melodix.Models.ListaReproduccion", b =>
                {
                    b.Navigation("ListaPistas");

                    b.Navigation("UsuarioLikeListas");

                    b.Navigation("UsuarioSigueListas");
                });

            modelBuilder.Entity("Melodix.Models.Models.ApplicationUser", b =>
                {
                    b.Navigation("ArchivosSubidos");

                    b.Navigation("HistorialEscuchas");

                    b.Navigation("HistorialLikes");

                    b.Navigation("ListasReproduccion");

                    b.Navigation("LogsGenerados");

                    b.Navigation("Perfil");

                    b.Navigation("Seguidores");

                    b.Navigation("Seguidos");

                    b.Navigation("SolicitudesMusico");

                    b.Navigation("SolicitudesRevisadas");

                    b.Navigation("SuscripcionUsuarios");

                    b.Navigation("Suscripciones");

                    b.Navigation("TransaccionesPago");

                    b.Navigation("UsuarioLikeAlbums");

                    b.Navigation("UsuarioLikeListas");

                    b.Navigation("UsuarioLikePistas");

                    b.Navigation("UsuarioSigueArtistas");

                    b.Navigation("UsuarioSigueListas");
                });

            modelBuilder.Entity("Melodix.Models.Pista", b =>
                {
                    b.Navigation("ArchivosMusica");

                    b.Navigation("HistorialEscuchas");

                    b.Navigation("ListaPistas");

                    b.Navigation("UsuarioLikePistas");
                });

            modelBuilder.Entity("Melodix.Models.PlanSuscripcion", b =>
                {
                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Melodix.Models.Suscripcion", b =>
                {
                    b.Navigation("SuscripcionUsuarios");

                    b.Navigation("TransaccionesPago");
                });
#pragma warning restore 612, 618
        }
    }
}
